//===== rAthena Script =======================================
//= MVP Ladder Game
//===== By: ==================================================
//= aftermath, AnnieRuru (rewrite)
//===== Current Version: =====================================
//= 1.0
//===== Compatible With: =====================================
//= rAthena Project
//===== Description: =========================================
//= Gather a party and kill every MVP in ascending order.
//===== Additional Comments: =================================
//= 1.0 First version, edited. [Euphy]
//============================================================

prontera,150,284,4	script	MvP Ladder Warper	56,{
	mes "[MvP Ladder Warper]";
	mes "Diga... você quer jogar o jogo da MvP Ladder?";
	next;
	switch(select("Sim, vamos nessa!:Informações.:Mostre-me o melhor recorde.:Não.")) {
	case 1:
		break;
	case 2:
		mes "[MvP Ladder Warper]";
		mes "Neste jogo, sua equipe precisa matar cada monstro MvP em ordem crescente, do mais fraco para o mais forte.";
		if ( .finish_item_amount )
			mes "Se sua equipe conseguir concluir o jogo MvP Ladder, cada membro ganhará "+ callfunc("F_InsertPlural", .finish_item_amount, getitemname( .finish_item_id )) +".";
		if ( .register_cost )
			mes "Mas a taxa de entrada é de "+ callfunc( "F_InsertComma", .register_cost ) +" zeny.";
		next;
		mes "[MvP Ladder Warper]";
		mes "Você perde o jogo se não conseguir terminar em "+ .timeout +" minutos ou se toda a sua equipe for derrotada.";
		mes "Boa sorte!";
		close;
	case 3:
		mes "[MvP Ladder Warper]";
		if ( !$mvpladdderparty_time ) {
			mes "Ninguém terminou este jogo ainda.";
			close;
		}
		mes "O melhor recorde é";
		mes "[ "+( $mvpladdderparty_time / 60 )+" min "+( $mvpladdderparty_time % 60 )+" seg ]";
		mes "Pela equipe ^FF0000"+ $mvpladdderparty_name$ +"^000000.";
		.@size = getarraysize( $mvpladderparty_member$ );
		for ( .@i = 0; .@i < .@size; .@i++ )
			mes "^000000"+ ( .@i +1 ) +". ^0000FF"+ $mvpladderparty_member$[.@i];
		if ( getgmlevel() < .gmlvlreset ) close;
		next;
		if ( select( "Fechar.", "Resetar o recorde." ) == 1 ) close;
		if ( select( "Deixa pra lá.", "Eu realmente quero resetar isso." ) == 1 ) close;
		$mvpladdderparty_time = 0;
		$mvpladdderparty_name$ = "";
		deletearray $mvpladderparty_member$[.@i];
		mes "[MvP Ladder Warper]";
		mes "Recorde resetado com sucesso.";
		close;
	case 4:
		mes "[MvP Ladder Warper]";
		mes "Quando você for forte o suficiente para completar o jogo, por favor, volte.";
		close;
	}
	if ( !getcharid(1) ) {
		mes "[MvP Ladder Warper]";
		mes "Você precisa formar uma equipe para jogar.";
		close;
	}
	if ( is_party_leader() == false ) {
		mes "[MvP Ladder Warper]";
		mes "Apenas o líder da equipe pode se registrar.";
		close;
	}
	.@origin = getcharid(3);
	getpartymember getcharid(1), 1;
	getpartymember getcharid(1), 2;
	for ( .@i = 0; .@i < $@partymembercount; .@i++ ) {
		if ( isloggedin( $@partymemberaid[.@i], $@partymembercid[.@i] ) ) {
			attachrid $@partymemberaid[.@i];
			if ( strcharinfo(3) == strnpcinfo(4) )
				.@online++;
		}
	}
	attachrid .@origin;
	if ( $@partymembercount != .register_min ) {
		mes "[MvP Ladder Warper]";
		mes "Você precisa formar uma equipe com exatamente "+ .register_min +" membros para jogar.";
		close;
	}
	else if ( .@online != .register_min )  {
		mes "[MvP Ladder Warper]";
		mes "Sua equipe deve ter "+ .register_min +" membros online no mapa '"+ strnpcinfo(4) +"'.";
		close;
	}
	else if ( .register_cost && Zeny < .register_cost ) {
		mes "[MvP Ladder Warper]";
		mes "Você não tem dinheiro suficiente. Por favor, volte quando tiver.";
		close;
	}
	else if ( .party_id ) {
		mes "[MvP Ladder Warper]";
		mes "Desculpe, mas uma equipe está atualmente jogando o jogo. Por favor, aguarde até que a equipe termine.";
		mes "Obrigado.";
		close;
	}
	Zeny -= .register_cost;
	announce "A equipe ["+ strcharinfo(1) +"] iniciou o jogo MvP ladder.", bc_all;
	set .party_id, getcharid(1);
	set .@time_enter, gettimetick(2);
	for ( .@i = 0; .@i < $@partymembercount; .@i++ ) {
		if ( isloggedin( $@partymemberaid[.@i], $@partymembercid[.@i] ) ) {
			attachrid $@partymemberaid[.@i];
			if ( strcharinfo(3) == strnpcinfo(4) ) {
				announce "Você tem "+ .timeout +" minutos para completar "+ .totalround +" rounds.", bc_self;
				.@name$[.@c] = strcharinfo(0);
				.@c++;
			}
		}
	}
	cleanmap .eventmap$;
	warpparty .eventmap$, 0,0, .party_id, strnpcinfo(4);
	donpcevent strnpcinfo(0)+"::OnMvpDead";
	sleep .timeout * 60000;
	if ( .round == .totalround +1 ) {
		getpartymember .party_id, 1;
		getpartymember .party_id, 2;
		mapannounce .eventmap$, "Parabéns... Você conseguiu derrotar todos os MVPs!", bc_map;
		for ( .@i = 0; .@i < $@partymembercount; .@i++ ) {
			if ( isloggedin( $@partymemberaid[.@i], $@partymembercid[.@i] ) ) {
				attachrid $@partymemberaid[.@i];
				if ( strcharinfo(3) == .eventmap$ )
					getitem .finish_item_id, .finish_item_amount;
			}
		}
		set .@timeused, gettimetick(2) - .@time_enter;
		if ( .bonus_item_amount && .@timeused < .bonus_time * 60 ) {
			mapannounce .eventmap$, "Você recebe uma recompensa extra por completar a ladder em "+ .bonus_time +" minutos.", bc_map;
			for ( .@i = 0; .@i < $@partymembercount; .@i++ ) {
				if ( isloggedin( $@partymemberaid[.@i], $@partymembercid[.@i] ) ) {
					attachrid $@partymemberaid[.@i];
					if ( strcharinfo(3) == .eventmap$ )
						getitem .bonus_item_id, .bonus_item_amount;
				}
			}
		}

		if ( !$mvpladdderparty_time || .@timeused < $mvpladdderparty_time ) {
			mapannounce .eventmap$, "E você quebrou o recorde! [ "+( .@timeused / 60 )+" min "+( .@timeused % 60 )+" seg ]", bc_map;
			set $mvpladdderparty_time, .@timeused;
			set $mvpladdderparty_name$, getpartyname( .party_id );
			copyarray $mvpladderparty_member$, .@name$, .register_min;
		}
		else
			mapannounce .eventmap$, "Tempo utilizado [ "+( .@timeused / 60 )+" min "+( .@timeused % 60 )+" seg ]", bc_map;
		sleep 10000;
		announce "A equipe ["+ getpartyname( .party_id ) +"] concluiu o jogo MvP ladder!", bc_all;
	}
	else
		announce "A equipe ["+ getpartyname( .party_id ) +"] falhou em concluir o jogo MvP ladder.", bc_all;
	mapwarp .eventmap$, .map$, .x, .y;
	killmonsterall .eventmap$;
	.party_id = .round = 0;
	end;

OnMvpDead:
	getpartymember .party_id, 1;
	getpartymember .party_id, 2;
	.round++;
	if ( .round >= 2 && .round != .totalround +1 && .round_item_amount ) {
		for ( .@i = 0; .@i < $@partymembercount; .@i++ ) {
			if ( isloggedin( $@partymemberaid[.@i], $@partymembercid[.@i] ) ) {
				attachrid $@partymemberaid[.@i];
				if ( strcharinfo(3) == .eventmap$ )
					getitem .round_item_id, .round_item_amount;
			}
		}
	}
	if ( .round == .totalround +1 ) {
		awake strnpcinfo(0);
		end;
	}
	else if ( .round == .totalround )
		mapannounce .eventmap$, "A última rodada começará em "+ .delay +" segundos...", bc_map;
	else
		mapannounce .eventmap$, "Iniciando rodada "+ .round +" em "+ .delay +" segundos...", bc_map;
	sleep .delay * 1000;
	if ( .mvpid[.round] == 1646 )  // escolha um Bio3 MVP aleatório
		.mvpid[.round] = rand(1646,1651);
	monster .eventmap$,0,0, "--ja--", .mvpid[.round], 1, strnpcinfo(0)+"::OnMvpDead";
	mapannounce .eventmap$, getmonsterinfo( .mvpid[.round], MOB_NAME ) +" apareceu!", bc_map|bc_blue;
	end;

OnPCLogoutEvent:
	if ( hp > 0 )
		.@less_one = 1;
	else
		end;
OnPCDieEvent:
	if ( strcharinfo(3) != .eventmap$ || !getcharid(1) ) end;
	if ( getcharid(1) != .party_id ) end;
	getpartymember .party_id, 1;
	getpartymember .party_id, 2;
	for ( .@i = 0; .@i < $@partymembercount; .@i++ ) {
		if ( isloggedin( $@partymemberaid[.@i], $@partymembercid[.@i] ) ) {
			attachrid $@partymemberaid[.@i];
			if ( strcharinfo(3) == .eventmap$ && hp > 0 )
				.@alive++;
		}
	}
	if ( .@less_one )
		.@alive--;
	if ( !.@alive ) {
		mapannounce .eventmap$, "Equipe derrotada!", bc_map;
		sleep 10000;
		awake strnpcinfo(0);
	}
	end;

OnInit:
//	Configurações -------------------------------------------------------

	// Limite de tempo (em minutos)
	// Quando o tempo acabar, todos os jogadores dentro da sala serão expulsos.
	// NÃO defina isso como zero!
	set .timeout, 60;

	// Taxa de entrada (em Zeny)
	set .register_cost, 100000;

	// Número exato de membros da equipe necessários para iniciar o jogo
	set .register_min, 2;

	// ID de cada MVP. você pode adicionar mais
	setarray .mvpid[1],
		1086,//	Golden Thief Bug	64
		1115,//	Eddga				65
		1150,//	Moonlight Flower	67
		1159,//	Phreeoni			69
		1112,//	Drake				70
		1583,//	Tao Gunka			70
		1492,//	Incantation Samurai	71
		1046,//	Doppelgangger		72
		1252,//	Garm				73
		1418,//	Evil Snake Lord		73
		1059,//	Mistress			74
		1190,//	Orc Lord			74
		1087,//	Orc Hero			77
		1251,//	Knight of Windstorm	77
		 // ... Adicione mais MVPs conforme necessário
		1832;//	Ifrit				99

	// Número de rodadas (padrão: 39)
	set .totalround, getarraysize(.mvpid) -1;

	// Item de recompensa para cada rodada concluída
	set .round_item_id, 512;
	set .round_item_amount, 1;

	// Item de recompensa por concluir toda a ladder
	set .finish_item_id, 501;
	set .finish_item_amount, 10;

	// Recompensa de bônus se a ladder for concluída dentro de um certo tempo (em minutos)
	set .bonus_time, 45; // se concluído dentro de 45 minutos, esta recompensa é dada
	set .bonus_item_id, 504;
	set .bonus_item_amount, 10;

	// Atraso entre as rodadas, em segundos (padrão: 3)
	set .delay, 5;

	// Nível mínimo de GM para resetar o melhor recorde
	set .gmlvlreset, 99;

	// Mapa do evento
	set .eventmap$, "guild_vs2-2";

	// Configuração do mapflag
	setarray .@mapflag,
		mf_nowarp,
		mf_nowarpto,
		mf_nosave,
		mf_nomemo,
		mf_noteleport,
		mf_noreturn,
		mf_partylock;

//	Fim das Configurações --------------------------------------------------

	mapannounce .eventmap$, "Um administrador atualizou o servidor. Por favor, registre-se novamente. Pedimos desculpas pelo inconveniente.", bc_map;
	getmapxy .map$, .x, .y, BL_NPC;
	mapwarp .eventmap$, .map$, .x, .y;
	killmonsterall .eventmap$;
	.@size = getarraysize( .@mapflag );
	for ( .@i = 0; .@i < .@size; .@i++ )
		setmapflag .eventmap$, .@mapflag[.@i];
	end;
}
